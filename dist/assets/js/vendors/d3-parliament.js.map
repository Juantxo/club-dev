{"version":3,"names":[],"mappings":"","sources":["vendors/d3-parliament.js"],"sourcesContent":["/*\n * MIT License\n * Â© Copyright 2016 - Geoffrey Brossard (me@geoffreybrossard.fr)\n */\n\nd3.parliament = function() {\n    /* params */\n    var width,\n        height,\n        innerRadiusCoef = 0.4;\n\n    /* animations */\n    var enter = {\n            \"smallToBig\": true,\n            \"fromCenter\": true\n        },\n        update = {\n          'animate': true,\n        },\n        exit = {\n            \"bigToSmall\": true,\n            \"toCenter\": true\n        };\n\n    /* events */\n    var parliamentDispatch = d3.dispatch(\"click\", \"dblclick\", \"mousedown\", \"mouseenter\",\n        \"mouseleave\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"touchcancel\", \"touchend\",\n        \"touchmove\", \"touchstart\");\n\n    function parliament(data) {\n        data.each(function(d) {\n\n            // if user did not provide, fill the svg:\n            width = width ? width : this.getBoundingClientRect().width;\n            height = width ? width / 2 : this.getBoundingClientRect().width/2;\n\n            var outerParliamentRadius = Math.min(width/2, height);\n            var innerParliementRadius = outerParliamentRadius * innerRadiusCoef;\n\n            /* init the svg */\n            var svg = d3.select(this);\n\n            /***\n             * compute number of seats and rows of the parliament */\n            var nSeats = 0;\n            d.forEach(function(p) { nSeats += (typeof p.seats === 'number') ? Math.floor(p.seats) : p.seats.length; });\n\n            var nRows = 0;\n            var maxSeatNumber = 0;\n            var b = 0.5;\n            (function() {\n                var a = innerRadiusCoef / (1 - innerRadiusCoef);\n                while (maxSeatNumber < nSeats) {\n                    nRows++;\n                    b += a;\n                    /* NOTE: the number of seats available in each row depends on the total number\n                    of rows and floor() is needed because a row can only contain entire seats. So,\n                    it is not possible to increment the total number of seats adding a row. */\n                    maxSeatNumber = series(function(i) { return Math.floor(Math.PI * (b + i)); }, nRows-1);\n                }\n            })();\n\n\n            /***\n             * create the seats list */\n            /* compute the cartesian and polar coordinates for each seat */\n            var rowWidth = (outerParliamentRadius - innerParliementRadius) / nRows;\n            var seats = [];\n            (function() {\n                var seatsToRemove = maxSeatNumber - nSeats;\n                for (var i = 0; i < nRows; i++) {\n                    var rowRadius = innerParliementRadius + rowWidth * (i + 0.5);\n                    var rowSeats = Math.floor(Math.PI * (b + i)) - Math.floor(seatsToRemove / nRows) - (seatsToRemove % nRows > i ? 1 : 0);\n                    var anglePerSeat = Math.PI / rowSeats;\n                    for (var j = 0; j < rowSeats; j++) {\n                        var s = {};\n                        s.polar = {\n                            r: rowRadius,\n                            teta: -Math.PI + anglePerSeat * (j + 0.5)\n                        };\n                        s.cartesian = {\n                            x: s.polar.r * Math.cos(s.polar.teta),\n                            y: s.polar.r * Math.sin(s.polar.teta)\n                        };\n                        seats.push(s);\n                    }\n                };\n            })();\n\n            /* sort the seats by angle */\n            seats.sort(function(a,b) {\n                return a.polar.teta - b.polar.teta || b.polar.r - a.polar.r;\n            });\n\n            /* fill the seat objects with data of its party and of itself if existing */\n            (function() {\n                var partyIndex = 0;\n                var seatIndex = 0;\n                seats.forEach(function(s) {\n                    /* get current party and go to the next one if it has all its seats filled */\n                    var party = d[partyIndex];\n                    var nSeatsInParty = typeof party.seats === 'number' ? party.seats : party.seats.length;\n                    if (seatIndex >= nSeatsInParty) {\n                        partyIndex++;\n                        seatIndex = 0;\n                        party = d[partyIndex];\n                    }\n\n                    /* set party data */\n                    s.party = party;\n                    s.data = typeof party.seats === 'number' ? null : party.seats[seatIndex];\n\n                    seatIndex++;\n                });\n            })();\n\n\n            /***\n             * helpers to get value from seat data */\n            var seatClasses = function(d) {\n                var c = \"seat \";\n                c += (d.party && d.party.id) || \"\";\n                return c.trim();\n            };\n            var seatX = function(d) { return d.cartesian.x; };\n            var seatY = function(d) { return d.cartesian.y; };\n            var seatRadius = function(d) {\n                var r = 0.4 * rowWidth;\n                if (d.data && typeof d.data.size === 'number') {\n                    r *= d.data.size;\n                }\n                return r;\n            };\n\n\n            /***\n             * fill svg with seats as circles */\n            /* container of the parliament */\n            var container = svg.select(\".parliament\");\n            if (container.empty()) {\n                container = svg.append(\"g\");\n                container.classed(\"parliament\", true);\n            }\n            container.attr(\"transform\", \"translate(\" + width / 2 + \",\" + outerParliamentRadius + \")\");\n\n            /* all the seats as circles */\n            var circles = container.selectAll(\".seat\").data(seats);\n            circles.attr(\"class\", seatClasses);\n\n            /* animation adding seats to the parliament */\n            var circlesEnter = circles.enter().append(\"circle\");\n            circlesEnter.attr(\"class\", seatClasses);\n            circlesEnter.attr(\"cx\", enter.fromCenter ? 0 : seatX);\n            circlesEnter.attr(\"cy\", enter.fromCenter ? 0 : seatY);\n            circlesEnter.attr(\"r\", enter.smallToBig ? 0 : seatRadius);\n            if (enter.fromCenter || enter.smallToBig) {\n                var t = circlesEnter.transition().duration(function() { return 1000 + Math.random()*800; });\n                if (enter.fromCenter) {\n                    t.attr(\"cx\", seatX);\n                    t.attr(\"cy\", seatY);\n                }\n                if (enter.smallToBig) {\n                    t.attr(\"r\", seatRadius);\n                }\n            }\n\n            /* circles catch mouse and touch events */\n            for (var evt in parliamentDispatch._) {\n                (function(evt){\n                    circlesEnter.on(evt, function(e) { parliamentDispatch.call(evt, this, e); });\n                })(evt);\n            }\n\n            /* animation updating seats in the parliament */\n            if (update.animate) {\n              var circlesUpdate = circles.transition().duration(function() { return 1000 + Math.random()*800; });\n            } else {\n              var circlesUpdate = circles;\n            }\n              circlesUpdate.attr(\"cx\", seatX)\n                .attr(\"cy\", seatY)\n                .attr(\"r\", seatRadius);\n\n            /* animation removing seats from the parliament */\n            if (exit.toCenter || exit.bigToSmall) {\n                var t = circles.exit().transition().duration(function() { return 1000 + Math.random()*800; });\n                if (exit.toCenter) {\n                    t.attr(\"cx\", 0).attr(\"cy\", 0);\n                }\n                if (exit.bigToSmall) {\n                    t.attr(\"r\", 0);\n                }\n                t.remove();\n            } else {\n                circles.exit().remove();\n            }\n        });\n    }\n\n    parliament.width = function(value) {\n        if (!arguments.length) return width;\n        width = value;\n        return parliament;\n    };\n\n    /** Deprecated since v1.0.1 */\n    parliament.height = function(value) {\n        if (!arguments.length) return height;\n        return parliament;\n    };\n\n    parliament.innerRadiusCoef = function(value) {\n        if (!arguments.length) return innerRadiusCoef;\n        innerRadiusCoef = value;\n        return parliament;\n    };\n\n    parliament.enter = {\n        smallToBig: function (value) {\n            if (!arguments.length) return enter.smallToBig;\n            enter.smallToBig = value;\n            return parliament.enter;\n        },\n        fromCenter: function (value) {\n            if (!arguments.length) return enter.fromCenter;\n            enter.fromCenter = value;\n            return parliament.enter;\n        }\n    };\n\n    parliament.update = {\n      animate: function(value) {\n        if (!arguments.length) return update.animate;\n        update.animate = value;\n        return parliament.update;\n      }\n    }\n\n    parliament.exit = {\n        bigToSmall: function (value) {\n            if (!arguments.length) return exit.bigToSmall;\n            exit.bigToSmall = value;\n            return parliament.exit;\n        },\n        toCenter: function (value) {\n            if (!arguments.length) return exit.toCenter;\n            exit.toCenter = value;\n            return parliament.exit;\n        }\n    };\n\n    parliament.on = function(type, callback) {\n        parliamentDispatch.on(type, callback);\n    }\n\n    return parliament;\n\n    // util\n    function series(s, n) { var r = 0; for (var i = 0; i <= n; i++) { r+=s(i); } return r; }\n\n}\n"],"file":"d3-parliament.js"}