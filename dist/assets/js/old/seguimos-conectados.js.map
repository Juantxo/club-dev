{"version":3,"names":[],"mappings":"","sources":["old/seguimos-conectados.js"],"sourcesContent":["(window => {\n  let mode = window[\"movistar\"].mode; // dev or production\n  let site = window[\"movistar\"].site; // visualThinking\n  let movistar_list = window[\"movistar\"].movistar_list;\n  let toTitleCase = window[\"movistar\"].helpers.toTitleCase;\n  let isInResponse = window[\"movistar\"].helpers.isInResponse;\n  let invariables = window[\"movistar\"].helpers.invariables;\n\n  const wordElem = \"word_name\";\n  const videoElem = document.querySelector(\"video\");\n  const playVideoElem = document.getElementById(\"playVideoButton\");\n\n  let getLocationHref = () => {\n    return mode === \"dev\"\n      ? window[\"movistar\"][\"dummy_href\"]\n      : window.location.href;\n  };\n\n  let names = [];\n  let isPlaying = false;\n  let xhr = new XMLHttpRequest();\n\n  const paramsInterval = 1480;\n\n  let getParams = url => {\n    let params = {};\n    let parser = document.createElement(\"a\");\n    parser.href = url;\n    let query = parser.search.substring(1);\n    let vars = query.split(\"&\");\n    for (let i = 0; i < vars.length; i++) {\n      let pair = vars[i].split(\"=\");\n      params[pair[0]] = decodeURIComponent(pair[1])\n        .replace(/\\+/g, \" \")\n        .replace(/\\s\\s+/g, \" \")\n        .trim();\n    }\n    return params;\n  };\n\n  let getWordsToFind = stringArray => {\n    let result = {\n      toCheck: [],\n      invars: []\n    };\n\n    stringArray.forEach(s => {\n      if (invariables.indexOf(s) >= 0) {\n        result.invars.push(s);\n      } else {\n        result.toCheck.push(s);\n      }\n    });\n\n    return result;\n  };\n\n  let buildTheFinalName = obj => {\n    let i;\n    let result = \"\";\n    result += toTitleCase(obj.toCheck[0]);\n\n    for (i = 0; i < obj[\"invars\"].length; i++) {\n      if (i === 0) {\n        result += \" \" + obj[\"invars\"][i] + \" \";\n      }\n      if (i === 1) {\n        result += obj[\"invars\"][i];\n      }\n    }\n    if (!!obj.toCheck[1]) {\n      result += \" \" + toTitleCase(obj.toCheck[1]);\n    }\n    return result;\n  };\n\n  let buildTheNameToCheck = arr => {\n    if (arr.length === 2) {\n      return arr[0] + \" \" + arr[1];\n    }\n    return arr[0];\n  };\n  let checkParams = (params, response) => {\n    let namesToCheck = Object.values(params);\n    let namesToCheckL = namesToCheck.length;\n    let i;\n    let result = [];\n\n    for (i = 0; i < namesToCheckL; i++) {\n      let originalName = namesToCheck[i];\n      if (originalName != \"\") {\n        let selectedWordsToFind = getWordsToFind(namesToCheck[i].split(\" \"));\n\n        if (\n          isInResponse(\n            buildTheNameToCheck(selectedWordsToFind.toCheck),\n            response\n          )\n        ) {\n          result.push(buildTheFinalName(selectedWordsToFind));\n        } else {\n          result.push(\"&nbsp;\");\n        }\n      } else {\n        result.push(\"&nbsp;\");\n      }\n    }\n    return result;\n  };\n\n  let setParamsInterval = words => {\n    let count = 0;\n    let word = document.getElementById(wordElem);\n    let timer = setInterval(() => {\n      word.innerHTML = words[count % words.length];\n      count++;\n      if (count === 11) {\n        clearInterval(timer);\n        word.innerHTML = \"&nbsp;\";\n      }\n    }, paramsInterval);\n  };\n\n  let getXMLresponse = res => {\n    let params = getParams(getLocationHref());\n    return (names = checkParams(params, JSON.parse(res)));\n  };\n\n  // VIDEO MEDIA\n\n  let playVideoTimeOut;\n  let pauseVideoTimeOut;\n\n  // video control\n\n  let mutedVideo = () => {\n    videoElem.muted = true;\n  };\n  let amplifiedVideo = () => {\n    videoElem.muted = false;\n  };\n\n  let pauseVideo = () => {\n    videoElem.autoplay = false;\n    videoElem.pause();\n  };\n  let playVideo = e => {\n    e.preventDefault;\n\n    try {\n      if (!isPlaying) {\n        isPlaying = true;\n        videoElem.play();\n        setParamsInterval(names);\n        toggleButtonState(playVideoElem, \"hidden\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  let playEnded = () => {\n    try {\n      if (isPlaying) {\n        isPlaying = false;\n        toggleButtonState(playVideoElem, \"hidden\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  let toggleButtonState = (buttonEl, buttonState) => {\n    try {\n      if (buttonEl.classList.contains(buttonState)) {\n        buttonEl.classList.remove(buttonState);\n      } else {\n        buttonEl.classList.add(buttonState);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  let initParams = res => {\n    getXMLresponse(res);\n    toggleButtonState(playVideoElem, \"hidden\");\n  };\n\n  // ACTIONS\n  xhr.open(\"GET\", movistar_list);\n  xhr.send();\n\n  playVideoElem.addEventListener(\"click\", playVideo, false);\n  videoElem.addEventListener(\"ended\", playEnded, false);\n\n  xhr.onload = () => {\n    if (xhr.status >= 200 && xhr.status < 300) {\n      initParams(xhr.responseText);\n    } else {\n      return;\n    }\n  };\n})(document);\n"],"file":"seguimos-conectados.js"}